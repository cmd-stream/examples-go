// Code generated by musgen-go. DO NOT EDIT.

package cmds

import (
	"fmt"

	"github.com/cmd-stream/core-go"
	"github.com/cmd-stream/examples-go/calc/receiver"
	dts "github.com/mus-format/dts-stream-go"
	muss "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/varint"
)

var AddCmdMUS = addCmdMUS{}

type addCmdMUS struct{}

func (s addCmdMUS) Marshal(v AddCmd, w muss.Writer) (n int, err error) {
	n, err = varint.Int.Marshal(v.A, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Int.Marshal(v.B, w)
	n += n1
	return
}

func (s addCmdMUS) Unmarshal(r muss.Reader) (v AddCmd, n int, err error) {
	v.A, n, err = varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.B, n1, err = varint.Int.Unmarshal(r)
	n += n1
	return
}

func (s addCmdMUS) Size(v AddCmd) (size int) {
	size = varint.Int.Size(v.A)
	return size + varint.Int.Size(v.B)
}

func (s addCmdMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = varint.Int.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Int.Skip(r)
	n += n1
	return
}

var AddCmdDTS = dts.New[AddCmd](AddCmdDTM, AddCmdMUS)

var SubCmdMUS = subCmdMUS{}

type subCmdMUS struct{}

func (s subCmdMUS) Marshal(v SubCmd, w muss.Writer) (n int, err error) {
	n, err = varint.Int.Marshal(v.A, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Int.Marshal(v.B, w)
	n += n1
	return
}

func (s subCmdMUS) Unmarshal(r muss.Reader) (v SubCmd, n int, err error) {
	v.A, n, err = varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.B, n1, err = varint.Int.Unmarshal(r)
	n += n1
	return
}

func (s subCmdMUS) Size(v SubCmd) (size int) {
	size = varint.Int.Size(v.A)
	return size + varint.Int.Size(v.B)
}

func (s subCmdMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = varint.Int.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Int.Skip(r)
	n += n1
	return
}

var SubCmdDTS = dts.New[SubCmd](SubCmdDTM, SubCmdMUS)

var CmdMUS = cmdMUS{}

type cmdMUS struct{}

func (s cmdMUS) Marshal(v core.Cmd[receiver.Calc], w muss.Writer) (n int, err error) {
	switch t := v.(type) {
	case AddCmd:
		return AddCmdDTS.Marshal(t, w)
	case SubCmd:
		return SubCmdDTS.Marshal(t, w)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s cmdMUS) Unmarshal(r muss.Reader) (v core.Cmd[receiver.Calc], n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case AddCmdDTM:
		v, n1, err = AddCmdDTS.UnmarshalData(r)
	case SubCmdDTM:
		v, n1, err = SubCmdDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s cmdMUS) Size(v core.Cmd[receiver.Calc]) (size int) {
	switch t := v.(type) {
	case AddCmd:
		return AddCmdDTS.Size(t)
	case SubCmd:
		return SubCmdDTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s cmdMUS) Skip(r muss.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case AddCmdDTM:
		n1, err = AddCmdDTS.SkipData(r)
	case SubCmdDTM:
		n1, err = SubCmdDTS.SkipData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
