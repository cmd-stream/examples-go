// Code generated by musgen-go. DO NOT EDIT.

package results

import (
	"fmt"

	"github.com/cmd-stream/core-go"
	dts "github.com/mus-format/dts-stream-go"
	muss "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/varint"
)

var CalcResultMUS = calcResultMUS{}

type calcResultMUS struct{}

func (s calcResultMUS) Marshal(v CalcResult, w muss.Writer) (n int, err error) {
	return varint.Int.Marshal(int(v), w)
}

func (s calcResultMUS) Unmarshal(r muss.Reader) (v CalcResult, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = CalcResult(tmp)
	return
}

func (s calcResultMUS) Size(v CalcResult) (size int) {
	return varint.Int.Size(int(v))
}

func (s calcResultMUS) Skip(r muss.Reader) (n int, err error) {
	return varint.Int.Skip(r)
}

var CalcResultDTS = dts.New[CalcResult](CalcResultDTM, CalcResultMUS)

var ResultMUS = resultMUS{}

type resultMUS struct{}

func (s resultMUS) Marshal(v core.Result, w muss.Writer) (n int, err error) {
	switch t := v.(type) {
	case CalcResult:
		return CalcResultDTS.Marshal(t, w)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s resultMUS) Unmarshal(r muss.Reader) (v core.Result, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case CalcResultDTM:
		v, n1, err = CalcResultDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s resultMUS) Size(v core.Result) (size int) {
	switch t := v.(type) {
	case CalcResult:
		return CalcResultDTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s resultMUS) Skip(r muss.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case CalcResultDTM:
		n1, err = CalcResultDTS.SkipData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
