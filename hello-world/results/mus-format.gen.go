// Code generated by musgen-go. DO NOT EDIT.

package results

import (
	"fmt"

	"github.com/cmd-stream/core-go"
	com "github.com/mus-format/common-go"
	dts "github.com/mus-format/dts-stream-go"
	mus "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/ord"
)

const (
	GreetingDTM com.DTM = iota + 1
)

var GreetingMUS = greetingMUS{}

type greetingMUS struct{}

func (s greetingMUS) Marshal(v Greeting, w mus.Writer) (n int, err error) {
	return ord.String.Marshal(string(v), w)
}

func (s greetingMUS) Unmarshal(r mus.Reader) (v Greeting, n int, err error) {
	tmp, n, err := ord.String.Unmarshal(r)
	if err != nil {
		return
	}
	v = Greeting(tmp)
	return
}

func (s greetingMUS) Size(v Greeting) (size int) {
	return ord.String.Size(string(v))
}

func (s greetingMUS) Skip(r mus.Reader) (n int, err error) {
	return ord.String.Skip(r)
}

var GreetingDTS = dts.New[Greeting](GreetingDTM, GreetingMUS)

var ResultMUS = resultMUS{}

type resultMUS struct{}

func (s resultMUS) Marshal(v core.Result, w mus.Writer) (n int, err error) {
	switch t := v.(type) {
	case Greeting:
		return GreetingDTS.Marshal(t, w)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s resultMUS) Unmarshal(r mus.Reader) (v core.Result, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case GreetingDTM:
		v, n1, err = GreetingDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s resultMUS) Size(v core.Result) (size int) {
	switch t := v.(type) {
	case Greeting:
		return GreetingDTS.Size(t)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s resultMUS) Skip(r mus.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case GreetingDTM:
		n1, err = GreetingDTS.SkipData(r)
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
